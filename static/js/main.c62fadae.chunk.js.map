{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","handleDropdownChange","e","key","setState","selectedDifficulty","generateHex","hex","i","Math","floor","random","startGame","start","currentRound","updateColors","allColors","numColors","state","newHex","includes","push","id","color","correctColor","handleColorSelect","selectedColorId","handleSubmit","curState","feedbackMessage","submited","score","changeBackground","handleSkip","numRounds","gameOver","handleNext","handleGameEnd","render","className","Text","variant","Separator","Dropdown","placeholder","options","text","selectedKey","onChange","disabled","DefaultButton","onClick","SwatchColorPicker","columnCount","cellShape","colorCells","selectedId","isControlled","onColorChanged","cellWidth","cellHeight","as","block","Component","App","document","querySelector","style","backgroundColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initializeIcons","ReactDOM","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c62fadae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  Dropdown,\r\n  DefaultButton,\r\n  SwatchColorPicker,\r\n  Separator,\r\n} from \"@fluentui/react\";\r\nimport \"./stylesheets/Game.css\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedDifficulty: \"easy\",\r\n      allColors: [],\r\n      correctColor: \"\",\r\n      start: false,\r\n      selectedColorId: \"\",\r\n      feedbackMessage: \"\",\r\n      submited: false,\r\n      numRounds: 10,\r\n      currentRound: 0,\r\n      score: 0,\r\n      gameOver: false,\r\n    };\r\n  }\r\n  handleDropdownChange = (e, { key }) => {\r\n    this.setState(() => {\r\n      return { selectedDifficulty: key };\r\n    });\r\n  };\r\n  generateHex = () => {\r\n    let hex = \"#\";\r\n    for (let i = 0; i < 6; i++) {\r\n      hex += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"][\r\n        Math.floor(Math.random() * 16)\r\n      ];\r\n    }\r\n    return hex;\r\n  };\r\n  startGame = () => {\r\n    this.setState(() => {\r\n      return { start: true, currentRound: 1 };\r\n    }, this.updateColors);\r\n  };\r\n  updateColors = () => {\r\n    const allColors = [];\r\n    let numColors = this.state.selectedDifficulty === \"easy\" ? 3 : 6;\r\n    // to prevent duplicate colors in same question.\r\n    let i = 0;\r\n    while (i < numColors) {\r\n      let newHex = this.generateHex();\r\n      if (!allColors.includes(newHex)) {\r\n        allColors.push({ id: i, color: this.generateHex() });\r\n        i++;\r\n      }\r\n    }\r\n    let correctColor = allColors[Math.floor(Math.random() * numColors)];\r\n    this.setState(() => {\r\n      return { allColors, correctColor };\r\n    });\r\n  };\r\n  handleColorSelect = (id) => {\r\n    this.setState(() => {\r\n      return { selectedColorId: id };\r\n    });\r\n  };\r\n  handleSubmit = () => {\r\n    if (this.state.selectedColorId === this.state.correctColor.id) {\r\n      this.setState((curState) => {\r\n        return {\r\n          feedbackMessage: \"Correct\",\r\n          submited: true,\r\n          score: curState.score + 1,\r\n          selectedColorId: curState.correctColor.id,\r\n        };\r\n      });\r\n    } else {\r\n      this.setState((curState) => {\r\n        return {\r\n          feedbackMessage: \"Wrong\",\r\n          submited: true,\r\n          selectedColorId: curState.correctColor.id,\r\n        };\r\n      });\r\n    }\r\n    this.props.changeBackground(this.state.correctColor.color);\r\n  };\r\n  handleSkip = () => {\r\n    if (this.state.currentRound < this.state.numRounds) {\r\n      this.setState((curState) => {\r\n        return {\r\n          selectedColorId: \"\",\r\n          feedbackMessage: \"\",\r\n          submited: false,\r\n          currentRound: curState.currentRound + 1,\r\n        };\r\n      }, this.updateColors);\r\n      this.props.changeBackground(this.state.correctColor.color);\r\n    } else {\r\n      this.setState(() => {\r\n        return { gameOver: true, start: false };\r\n      });\r\n    }\r\n  };\r\n  handleNext = () => {\r\n    if (this.state.currentRound < this.state.numRounds) {\r\n      this.setState((curState) => {\r\n        return {\r\n          currentRound: curState.currentRound + 1,\r\n          selectedColorId: \"\",\r\n          feedbackMessage: \"\",\r\n          submited: false,\r\n        };\r\n      }, this.updateColors);\r\n    } else {\r\n      this.setState(() => {\r\n        return { gameOver: true, start: false };\r\n      });\r\n    }\r\n  };\r\n  handleGameEnd = () => {\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          selectedDifficulty: \"easy\",\r\n          allColors: [],\r\n          correctColor: \"\",\r\n          start: false,\r\n          selectedColorId: \"\",\r\n          feedbackMessage: \"\",\r\n          submited: false,\r\n          numRounds: 10,\r\n          currentRound: 0,\r\n          score: 0,\r\n          gameOver: false,\r\n        };\r\n      },\r\n      () => {\r\n        this.props.changeBackground(\"#FFFFFF\");\r\n      }\r\n    );\r\n  };\r\n  render = () => {\r\n    const dropdownOptions = [\r\n      { key: \"easy\", text: \"Easy\" },\r\n      { key: \"hard\", text: \"Hard\" },\r\n    ];\r\n    return (\r\n      <div className=\"Game\">\r\n        <Text variant=\"xxLarge\">Can you guess the color?</Text>\r\n        <Separator />\r\n        {!this.state.start && !this.state.gameOver && (\r\n          <div className=\"Game-one\">\r\n            <Dropdown\r\n              placeholder=\"Select difficulty\"\r\n              options={dropdownOptions}\r\n              selectedKey={this.state.selectedDifficulty}\r\n              onChange={this.handleDropdownChange}\r\n              disabled={this.state.start}\r\n            />\r\n            <DefaultButton text=\"Start\" onClick={this.startGame} />\r\n          </div>\r\n        )}\r\n        {this.state.start && (\r\n          <div className=\"Game-two\">\r\n            <Text variant=\"mediumPlus\">\r\n              Round {this.state.currentRound}/{this.state.numRounds}\r\n            </Text>\r\n            <Text variant=\"xxLarge\">{this.state.correctColor.color}</Text>\r\n            <SwatchColorPicker\r\n              columnCount={3}\r\n              cellShape={\"square\"}\r\n              colorCells={this.state.allColors}\r\n              selectedId={this.state.selectedColorId}\r\n              isControlled\r\n              onColorChanged={this.handleColorSelect}\r\n              // in pixels :(\r\n              cellWidth={60}\r\n              cellHeight={60}\r\n              disabled={this.state.submited}\r\n            />\r\n            {!this.state.submited ? (\r\n              <div className=\"Game-two-buttonSet\">\r\n                <DefaultButton\r\n                  text=\"Submit\"\r\n                  onClick={this.handleSubmit}\r\n                  disabled={this.state.selectedColorId === \"\"}\r\n                />\r\n                <DefaultButton text=\"Skip\" onClick={this.handleSkip} />\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <Text variant=\"large\" as=\"h4\" block>\r\n                  {this.state.feedbackMessage}\r\n                </Text>\r\n                <DefaultButton text=\"Next\" onClick={this.handleNext} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        {this.state.gameOver && (\r\n          <div className=\"Game-three\">\r\n            <Text variant=\"xxLarge\" as=\"h2\" block>\r\n              Your Score is {this.state.score}/{this.state.numRounds}.\r\n            </Text>\r\n            <DefaultButton\r\n              text=\"Go To Main Screen\"\r\n              onClick={this.handleGameEnd}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n}\r\nexport default Game;\r\n","import React, { Component } from \"react\";\nimport Game from \"./Game\";\nimport \"./stylesheets/App.css\";\n\nclass App extends Component {\n  changeBackground = (hex) => {\n    document.querySelector(\".App\").style.backgroundColor = hex;\n  };\n  render = () => {\n    return (\n      <div className=\"App\">\n        <Game changeBackground={this.changeBackground} />\n      </div>\n    );\n  };\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { initializeIcons } from \"@uifabric/icons\";\ninitializeIcons();\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}